
import { env } from '../assets/config/environment'
import { HttpStatusCode } from '../assets/utilities/constants'
import { UserModel } from '../models/user.model'
import { JwtProvider } from '../providers/JwtProvider'
import { NextFunction, Request, Response } from 'express'

const authorizeAdmin = async (req: Request, res: Response, next: NextFunction) => {
  const accessToken = req.headers.authorization;
  
  if (!accessToken) {
    return res.status(401).json({
      errors: 'Unauthorized'
    });
  }

  const [type, token] = accessToken.split(" ");

  try {
    // Phuong: Th·ª±c hi·ªán gi·∫£i m√£ token xem n√≥ c√≥ ƒë√∫ng kh√¥ng
    const decoded = await JwtProvider.verifyToken(env.ACCESS_TOKEN_SECRET_SIGNATURE, token)

    //Quan tr·ªçng: n·∫øu nh∆∞ c√°i token h·ª£p l·ªá, th√¨ s·∫Ω c·∫ßn hp·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o req, ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c ph·∫ßn x·ª≠ l√Ω ph√≠a sau
    // req.body.jwtDecoded = decoded
    if (decoded && typeof decoded !== 'string' && decoded.hasOwnProperty('username')) {
      const user = await UserModel.findOneByUsername(decoded['username'])
      console.log("üöÄ ~ isAuthorized ~ user:", user)
      if (user?.role !== 'admin')
        return res.status(HttpStatusCode.UNAUTHORIZED).json({
          errors: "Don't have perrmission to complete this task"
        });
      (req as any).walletId = user.walletId;
    }
    //Cho ph√©p request ƒëi ti·∫øp
    next()

  } catch (error) {
    if (error instanceof Error) {
      if (error?.message?.includes('jwt expired')) {
        // cais accessToken n√≥ b·ªã h·∫øt h·∫°n th√¨ m√¨nh tr·∫£ v·ªÅ cho FE
        return res.status(HttpStatusCode.EXPIRED).json({
          error: 'Need to refresh token'
        })
      }
      //N·∫øu nh∆∞ c√°i accessToken n√≥ kh√¥ng h·ª£p l·ªá do b·∫•t k√¨ ƒëi·ªÅu g√¨ th√¨ ch√∫ng ta s·∫Ω tr·∫£ v·ªÅ m√£ l·ªói 410
      return res.status(HttpStatusCode.UNAUTHORIZED).json({
        error: 'Unauthorized'
      })
    }
  }
}

const authorizeUser = async (req: Request, res: Response, next: NextFunction) => {
  const accessToken = req.headers.authorization;
  
  if (!accessToken) {
    return res.status(401).json({
      errors: 'Unauthorized'
    });
  }

  const [type, token] = accessToken.split(" ");

  try {
    // Phuong: Th·ª±c hi·ªán gi·∫£i m√£ token xem n√≥ c√≥ ƒë√∫ng kh√¥ng
    const decoded = await JwtProvider.verifyToken(env.ACCESS_TOKEN_SECRET_SIGNATURE, token)
    console.log("Token: ", token);
    console.log("Decoded: ", decoded);
    //Quan tr·ªçng: n·∫øu nh∆∞ c√°i token h·ª£p l·ªá, th√¨ s·∫Ω c·∫ßn hp·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o req, ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c ph·∫ßn x·ª≠ l√Ω ph√≠a sau
    // req.body.jwtDecoded = decoded
    if (decoded && typeof decoded !== 'string' && decoded.hasOwnProperty('username')) {
      const user = await UserModel.findOneByUsername(decoded['username'])
      console.log("üöÄ ~ isAuthorized ~ user:", user)
      if (user?.role !== 'admin' && user?.role !== 'user')
        return res.status(HttpStatusCode.UNAUTHORIZED).json({
          errors: "Don't have perrmission to complete this task"
        });
      (req as any).walletId = user.walletId;
    }
    //Cho ph√©p request ƒëi ti·∫øp
    next()

  } catch (error) {
    if (error instanceof Error) {
      if (error?.message?.includes('jwt expired')) {
        // cais accessToken n√≥ b·ªã h·∫øt h·∫°n th√¨ m√¨nh tr·∫£ v·ªÅ cho FE
        return res.status(HttpStatusCode.EXPIRED).json({
          error: 'Need to refresh token'
        })
      }
      //N·∫øu nh∆∞ c√°i accessToken n√≥ kh√¥ng h·ª£p l·ªá do b·∫•t k√¨ ƒëi·ªÅu g√¨ th√¨ ch√∫ng ta s·∫Ω tr·∫£ v·ªÅ m√£ l·ªói 410
      return res.status(HttpStatusCode.UNAUTHORIZED).json({
        error: 'Unauthorized'
      })
    }
  }
}

export const AuthMiddleware = {
  authorizeAdmin,
  authorizeUser
}